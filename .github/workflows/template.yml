name: GameCI Template 🎮

on: push


env:
  UNITY_SERIAL : ${{ secrets.UNITY_SERIAL }}

jobs:

  # checkLicense:
  #   name: Check for the Unity license ☑️
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Fail - No license ☠️
  #       if: ${{ !startsWith(env.UNITY_SERIAL, 'S') }}
  #       run: exit 1

  buildWebGL:
    name: Build for WebGL 🖥️
    runs-on: ubuntu-latest
   
    strategy:
          fail-fast: false 
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
         git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-WebGL
          restore-keys: |
            Library-build-
            Library-

      - uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: WebGL
         # projectPath : CICD_Test # not in repo root ///

      - uses: actions/upload-artifact@v2
        with:
         name: build-WebGL
         path: build/WebGL


  buildWindows:
    name: Build for Windows 🖥️
    runs-on: ubuntu-latest
   
    strategy:
          fail-fast: false 
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
         git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-StandaloneWindows64
          restore-keys: |
            Library-build-
            Library-
            
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v1
        with:
          projectKey: shebinbas_CICID-R-D
          projectName: CICID-R-D
          serverUrl: 'https://sonarcloud.io'
          organization: 'shebinbas'
          scannerArgs: >
            -Dsonar.qualitygate.wait=true
            -Dsonar.login="${{ secrets.SONAR_TOKEN }}"
          extraProperties: |
            # Additional properties that can be set according to your requirements
            # sonar.cfamily.build-wrapper-output.bypass=true
            # sonar.sources=.
            # sonar.exclusions=**/*.cpp,**/*.h
            # sonar.projectVersion=1.0
            # sonar.tests=.
            # sonar.test.inclusions=**/*Test.cs
            # sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml

      - uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: StandaloneWindows64
         # projectPath : CICD_Test # not in repo root ///

      - uses: actions/upload-artifact@v2
        with:
         name: build-StandaloneWindows64
         path: build/StandaloneWindows64

  buildAndroid:
    needs: testRunner
    name: Build for Android 🖥️
    runs-on: ubuntu-latest
   
    strategy:
          fail-fast: false 
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
         git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-Android
          restore-keys: |
            Library-build-
            Library-

      - uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: Android
         # projectPath : CICD_Test # not in repo root ///

      - uses: actions/upload-artifact@v2
        with:
         name: build-Android
         path: build/Android

  testRunner:
    name: Test all modes
    runs-on: ubuntu-latest
   
    strategy:
          fail-fast: false 
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
         git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-test-project
          restore-keys: |
            Library-test-project-
            Library-

      - uses: game-ci/unity-test-runner@v2
        id: testRunner
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          testMode: all
         # projectPath : CICD_Test # not in repo root ///

      - uses: actions/upload-artifact@v2
        with:
         name: Test results (all modes)
         path: ${{ steps.testRunner.outputs.artifactsPath }}

  deployPages:
    needs: buildWebGL
    name: Deploy to Github Pages 🚀
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: build-WebGL
          path: build

      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: webgl-deploy-page
          folder: build/WebGL



      